<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_chequeos  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["BeforeMoveNextList"]=true;

		$this->events["CustomAdd"]=true;

		$this->events["AfterAdd"]=true;



		$this->events["CustomEdit"]=true;

		$this->events["AfterEdit"]=true;

		$this->events["BeforeAdd"]=true;

		$this->events["BeforeQueryList"]=true;

		$this->events["BeforeDelete"]=true;

		$this->events["BeforeEdit"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: After record processed
function BeforeMoveNextList(&$data, &$row, &$record, $recordId, $pageObject)
{

		if ($data["Procesado"]==1){ 
  //$record["ChequeoId_css"].='background:yellow';
	$pageObject->hideItem("button_crear", $recordId);
	$pageObject->hideItem("grid_edit", $recordId);
	$pageObject->hideItem("grid_checkbox", $recordId);
	$pageObject->hideItem("button_subir", $recordId); 
}

// Place event code here.
// Use "Add Action" button to add code snippets.
;
} // function BeforeMoveNextList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom add
function CustomAdd(&$values, &$keys, &$error, $inline, $pageObject)
{

		unset($values["ObligacionLetras"]); //Se borran los campos que no existen en la tabla Chequeos
unset($values["CantidadLetras"]);
//unset($values["Dias"]);
unset($values["FechaPago"]);
$values["Fecha"]=now();
$values["CarteraTipoId"]=1;
//$values['CarteraTipoId']=1; //se quema ya que la cartera siempre es Corriente=1
$consulta=DB::Query("SELECT * FROM Empresas");
        while( $date = $consulta->fetchAssoc() ){
						$maxSal=$date["MaximoSalarios"];
						$maxUvts=$date["MaximoUvt"];
						$maxPesos=$date["MaximoPesos"];
						$maxUbvs=$date["MaximoUvb"];
        }

if ($values["Tipo"]==1){
	if ($values['Obligacion']>$maxPesos){
		$values["Aprobado"]=0;
	}
}
else if ($values["Tipo"]==2){
	if ($values["Cantidad"]>$maxSal||$values['Obligacion']>$maxPesos){
		$values["Aprobado"]=0;
	}
}
else if ($values["Tipo"]==3){
	if ($values["Cantidad"]>$maxUvts||$values['Obligacion']>$maxPesos){
		$values["Aprobado"]=0;
	}
}

else if ($values["Tipo"]==4){
	if ($values["Cantidad"]>$maxUbvs||$values['Obligacion']>$maxPesos){
		$values["Aprobado"]=0;
	}
}
return true;
;
} // function CustomAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// After record added
function AfterAdd(&$values, &$keys, $inline, $pageObject)
{

		
$consulta=DB::exec("declare @p2 int
set @p2=0
declare @p3 nvarchar(max)
set @p3=N''
exec [dbo].[Chequeos_Validar] @ChequeoId=".$values["ChequeoId"].",@Err_num=@p2 output,@Err_msg=@p3 output
select @p2 error_num, @p3 error-msg");

/*$consulta=DB::Query("SELECT Cierre FROM Empresas WHERE EmpresaId = 1");
        while($date=$consulta->fetchAssoc()){
                $fechaCierre=$date["Cierre"];
        }
*/

/*
echo "<script>var confirm1;
confirm1=confirm('EL REGISTRO FUE REALIZADO CON EXITO');
if(confirm1)
{
		//console.log ('ingresooo');
    //location.reload();
		//pageObj.reload({a:'reload'});
		//location.reload();
		//window.location.href ='http://localhost:8086/chequeos_list.php?a=reload&';
		//window.location.href = window.location.href;
		//window.location.href ='http://localhost:8086/chequeos_list.php?a=return&fly=1&';
		//window.location.href ='http://localhost:8086/chequeos_list.php';
}</script>"
*/
;
} // function AfterAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom record update
function CustomEdit(&$values, $where, &$oldvalues, &$keys, &$error, $inline, $pageObject)
{

		unset($values["ObligacionLetras"]); //Se borran los campos que no existen en la tabla Chequeos
unset($values["CantidadLetras"]);
//unset($values["Dias"]);
unset($values["FechaPago"]);
$values["Fecha"]=now();
$values["CarteraTipoId"]=1;
//$values["Obligacion"]=floatval($values["Obligacion"]);
//$values['CarteraTipoId']=1; //se quema ya que la cartera siempre es Corriente=1

// Place event code here.
// Use "Add Action" button to add code snippets.



unset($values["ObligacionLetras"]); //Se borran los campos que no existen en la tabla Chequeos
unset($values["CantidadLetras"]);
//unset($values["Dias"]);
unset($values["FechaPago"]);
$values["Fecha"]=now();
$values["CarteraTipoId"]=1;
//$values['CarteraTipoId']=1; //se quema ya que la cartera siempre es Corriente=1
$consulta=DB::Query("SELECT * FROM Empresas");
        while( $date = $consulta->fetchAssoc() ){
						$maxSal=$date["MaximoSalarios"];
						$maxUvts=$date["MaximoUvt"];
						$maxPesos=$date["MaximoPesos"];
						$maxUbvs=$date["MaximoUvb"];
        }

if ($values["Tipo"]==1){
	if ($values['Obligacion']>$maxPesos){
		$values["Aprobado"]=0;
	}
}
else if ($values["Tipo"]==2){
	if ($values["Cantidad"]>$maxSal||$values['Obligacion']>$maxPesos){
		$values["Aprobado"]=0;
	}
}
else if ($values["Tipo"]==3){
	if ($values["Cantidad"]>$maxUvts||$values['Obligacion']>$maxPesos){
		$values["Aprobado"]=0;
	}
}

else if ($values["Tipo"]==4){
	if ($values["Cantidad"]>$maxUbvs||$values['Obligacion']>$maxPesos){
		$values["Aprobado"]=0;
	}
}
return true;

return true;
;
} // function CustomEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// After record updated
function AfterEdit(&$values, $where, &$oldvalues, &$keys, $inline, $pageObject)
{

		//$pageObject->setProxyValue('saved', true);  
//$pageObject->stopPRG = true;
// Place event code here.
// Use "Add Action" button to add code snippets.
;
} // function AfterEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record added
function BeforeAdd(&$values, &$message, $inline, $pageObject)
{

		$ejecutoria=$values['Ejecutoria'];
$fecha = new DateTime($ejecutoria);

$fechaActual = new DateTime();
$fechaActual = $fechaActual->format('Y-m-d');
if($values['Cantidad']<0){
	echo "<script>alert('La cantidad no puede ser negativa')</script>";
	return false;
}
if($values['Folios']<0){
	echo "<script>alert('La cantidad de folios no puede ser negativa')</script>";
	return false;
}
if ($values["ConceptoId"]!=5){
	$fecha->modify('+5 years');
	if ($fecha->format('Y-m-d')<$fechaActual){
		echo "<script>alert('A la fecha ejecutoria: ".$ejecutoria.", se le suman 5 años mas, dando como resultado la fecha: ".$fecha->format('Y-m-d')." la cual es menor a la fecha actual: ".$fechaActual.", por lo cual el Proceso ya se encuentra Prescrito')</script>";
		return false;
}
}
else{
	$fecha->modify('+3 years');
	if ($fecha->format('Y-m-d')<$fechaActual){
		echo "<script>alert('A la fecha ejecutoria: ".$ejecutoria.", se le suman 3 años mas, dando como resultado la fecha: ".$fecha->format('Y-m-d').", la cual es menor a la fecha actual: ".$fechaActual.", por lo cual el Proceso por INCAPACIDAD ya se encuentra Prescrito')</script>";
		return false;
}
}

//exit();
function convertirAPuntoFlotante($valor) {
    // Eliminar el símbolo de moneda y los espacios
    $valorLimpio = str_replace(['$', ' ', '.'], '', $valor);
    // Reemplazar la coma por un punto para que los decimales sean correctos
    $valorLimpio = str_replace(',', '.', $valorLimpio);
    // Convertir el valor a un número flotante
		return $valorLimpio;
}
$valor=convertirAPuntoFlotante($values['Obligacion']);
$valor=preg_replace('/[^0-9.]/', '', $valor); // se limpia todo loq ue no es numero y .
//echo "Valor: ".$valor;
//var_dump($valor);
$valor=floatval($valor);
//var_dump($valor);
$values['Obligacion']=$valor;
//echo "Value de Obligacion=".$values['Obligacion'];
$values["Remisorio"]=mb_strtoupper($values["Remisorio"], 'UTF-8');
//print_r($values);
$length=mb_strlen($values["Origen"], 'UTF-8');
//echo "Valor de FechaPago: ".$values['FechaPago'];
if (!empty($values['FechaPago'])){
	$values['Ejecutoria']=$values['FechaPago'];
}

if ($values['TramiteId']==2){
if ($values['PrimeraCopia']==0){
	echo '<script>alert ("La etapa Preliminar debe tener Primera Copia")</script>';
	return false;
}
if ($values['Autentica']==0){
	echo '<script>alert ("La etapa Preliminar ser Autentica")</script>';
	return false;
}
if ($values['PrestaMeritoEjecutivo']==0){
	echo '<script>alert ("La etapa Preliminar debe tener Presta Merito Ejecutivo")</script>';
	return false;
}
if ($values['Expresa']==0){
	echo '<script>alert ("La etapa Preliminar debe ser Expresa")</script>';
	return false;
}
if ($values['CompetenciaDEAJ']==0){
	echo '<script>alert ("La etapa Preliminar debe tener Competencia")</script>';
	return false;
}
if ($values['ActualmenteExigible']==0){
	echo '<script>alert ("La etapa Preliminar debe ser Actualmente Exigible")</script>';
	return false;
}
if ($values['Clara']==0){
	echo '<script>alert ("La etapa Preliminar debe ser Clara)</script>';
	return false;
}
if ($values['FaltaCompetencia']==1){
	echo '<script>alert ("Si esta en tramite Apertura, no le puede Faltar Competencia")</script>';
	return false;
}
if ($values['FaltaRequisitos']==1){
	echo '<script>alert ("Si esta en tramite Apertura, no le puede Faltar Requisitos")</script>';
	return false;
}
if ($values['PorPrescripcion']==1){
	echo '<script>alert ("Si esta en tramite Apertura, no puede ser Por Prescripcion")</script>';
	return false;
}
if ($values['FaltaRequisitos']==1){
	echo '<script>alert ("Si esta en tramite Apertura, no le puede Faltar Requisitos")</script>';
	return false;
}
if ($values['MinJusticia']==1){
	echo '<script>alert ("Si esta en tramite Apertura, no se puede marcar MinJusticia")</script>';
	return false;
}
}
if ($length<23||$length>23){
	echo '<script>alert ("El numero de Origen debe contener 23 caracteres ")</script>';
	return false;
}
elseif(($values['Ejecutoria']<$values['Providencia'])&&$values['ConceptoId']!=5){
	echo '<script>alert ("La Fecha Ejecutoria: '.$values['Ejecutoria'].' debe ser mayor o igual a la Fecha Providencia: '.$values['Providencia'].'")</script>';
	return false;
}
elseif(($values['Ejecutoria']>$values['Plazo'])&&$values['ConceptoId']!=5){
	echo '<script>alert ("La Fecha Ejecutoria: '.$values['Ejecutoria'].' debe ser menor o igual a la Fecha Plazo: '.$values['Plazo'].'")</script>';
	return false;
}
elseif($values['FechaSancion']>now()){
	echo '<script>alert ("La Fecha Sancion: '.$values['FechaSancion'].' debe ser menor o igual a la Fecha Actual: '.now().'")</script>';
	return false;
}
return true;



;
} // function BeforeAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: Before SQL query
function BeforeQueryList(&$strSQL, &$strWhereClause, &$strOrderBy, $pageObject)
{

		$strWhereClause = whereAdd($strWhereClause, "SeccionalId in (".$_SESSION["Seccionales"].")");
//echo $strSQL;

// Place event code here.
// Use "Add Action" button to add code snippets.
;
} // function BeforeQueryList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record deleted
function BeforeDelete($where, &$deleted_values, &$message, $pageObject)
{

		DB::Delete("ChequeosSancionados", "ChequeoId=".$deleted_values["ChequeoId"]."" );
DB::Delete("Devoluciones", "ChequeoId=".$deleted_values["ChequeoId"]."" );
DB::Delete("ChequeosOficios", "ChequeoId=".$deleted_values["ChequeoId"]."" );

// Place event code here.
// Use "Add Action" button to add code snippets.

return true;
;
} // function BeforeDelete

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, $where, &$oldvalues, &$keys, &$message, $inline, $pageObject)
{

		//print_r($values);
$ejecutoria=$values['Ejecutoria'];
$fecha = new DateTime($ejecutoria);

$fechaActual = new DateTime();
$fechaActual = $fechaActual->format('Y-m-d');
if($values['Cantidad']<0){
	echo "<script>alert('La cantidad no puede ser negativa')</script>";
	return false;
}
if($values['Folios']<0){
	echo "<script>alert('La cantidad de folios no puede ser negativa')</script>";
	return false;
}
if ($values["ConceptoId"]!=5){
	$fecha->modify('+5 years');
	if ($fecha->format('Y-m-d')<$fechaActual){
		echo "<script>alert('A la fecha ejecutoria: ".$ejecutoria.", se le suman 5 años mas, dando como resultado la fecha: ".$fecha->format('Y-m-d')." la cual es menor a la fecha actual: ".$fechaActual.", por lo cual el Proceso ya se encuentra Prescrito')</script>";
		return false;
}
}
else{
	$fecha->modify('+3 years');
	if ($fecha->format('Y-m-d')<$fechaActual){
		echo "<script>alert('A la fecha ejecutoria: ".$ejecutoria.", se le suman 3 años mas, dando como resultado la fecha: ".$fecha->format('Y-m-d').", la cual es menor a la fecha actual: ".$fechaActual.", por lo cual el Proceso por INCAPACIDAD ya se encuentra Prescrito')</script>";
		return false;
}
}

function convertirAPuntoFlotante($valor) {
    // Eliminar el símbolo de moneda y los espacios
    $valorLimpio = str_replace(['$', ' ', '.'], '', $valor);
    // Reemplazar la coma por un punto para que los decimales sean correctos
    $valorLimpio = str_replace(',', '.', $valorLimpio);
    // Convertir el valor a un número flotante
		return $valorLimpio;
}
$valor=convertirAPuntoFlotante($values['Obligacion']);
$valor=preg_replace('/[^0-9.]/', '', $valor); // se limpia todo loq ue no es numero y .
//echo "Valor: ".$valor;
//var_dump($valor);
$valor=floatval($valor);
//var_dump($valor);
$values['Obligacion']=$valor;
$values["Remisorio"]=mb_strtoupper($values["Remisorio"], 'UTF-8');
//$values["Obligacion"]=$_SESSION["Obligacion"];
//echo $_SESSION["Obligacion"];
/*
if ($_SESSION["Obligacion"]!=NULL){
	$_SESSION["Obligacion"]=$values["Obligacion"];
}
*/
//$_SESSION["Obligacion"]=$values["Obligacion"];
if (!empty($values['FechaPago'])){
	$values['Ejecutoria']=$values['FechaPago'];
}
//print_r($values);

$length=mb_strlen($values["Origen"], 'UTF-8');
if ($values['TramiteId']==2){
	if ($values['PrimeraCopia']==0){
	echo '<script>alert ("La etapa Preliminar debe tener Primera Copia")</script>';
	return false;
}
	if ($values['Autentica']==0){
	echo '<script>alert ("La etapa Preliminar ser Autentica")</script>';
	return false;
}
if ($values['PrestaMeritoEjecutivo']==0){
	echo '<script>alert ("La etapa Preliminar debe tener Presta Merito Ejecutivo")</script>';
	return false;
}
if ($values['Expresa']==0){
	echo '<script>alert ("La etapa Preliminar debe ser Expresa")</script>';
	return false;
}
if ($values['CompetenciaDEAJ']==0){
	echo '<script>alert ("La etapa Preliminar debe tener Competencia")</script>';
	return false;
}
if ($values['ActualmenteExigible']==0){
	echo '<script>alert ("La etapa Preliminar debe ser Actualmente Exigible")</script>';
	return false;
}
if ($values['Clara']==0){
	echo '<script>alert ("La etapa Preliminar debe ser Clara)</script>';
	return false;
}
}
if ($length<23||$length>23){
	echo '<script>alert ("El numero de Origen debe contener 23 caracteres ")</script>';
	return false;
}
elseif($values['Ejecutoria']<$values['Providencia']){
	echo '<script>alert ("La Fecha Ejecutoria: '.$values['Ejecutoria'].' debe ser mayor o igual a la Fecha Providencia: '.$values['Providencia'].'")</script>';
	return false;
}
elseif($values['Ejecutoria']>$values['Plazo']){
	echo '<script>alert ("La Fecha Ejecutoria: '.$values['Ejecutoria'].' debe ser menor o igual a la Fecha Plazo: '.$values['Plazo'].'")</script>';
	return false;
}
elseif($values['FechaSancion']>now()){
	echo '<script>alert ("La Fecha Sancion: '.$values['FechaSancion'].' debe ser menor o igual a la Fecha Actual: '.now().'")</script>';
	return false;
}
return true;
;
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>